#!/usr/bin/env python
#
import sys
import select

_ESC = chr(0x1B)

def getTerminalSize():
    def ioctl_GWINSZ(fd):
        try:
            import fcntl, termios, struct, os
            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
        except:
            return None
        return cr
    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass
    if not cr:
        try:
            cr = (env['LINES'], env['COLUMNS'])
        except:
            cr = (25, 80)
    return int(cr[1]), int(cr[0])

def setCursorPosition(x, y):
    sys.stdout.write(_ESC + '[' + str(y) + ';' + str(x) + 'f')
    sys.stdout.flush()

def clear_scr():
    # setCursorPosition(0, 0)
    # size = getTerminalSize()
    # for x in range(size[0] * size[1]):
    #     sys.stdout.write(' ')
    # sys.stdout.flush()
    # setCursorPosition(0, 0)
    sys.stdout.write(_ESC + '[2J')
    sys.stdout.flush()

def ascii():
    for i in range(256):
        if i%4 == 0:
            print
        print i, chr(i), 

def print_utf8(char16):
    f = (0xE0 | (char16 >> 12)) & 0xFF
    m = (0x80 | (char16 & 0x0F00) >> 6 | 0x02) & 0xFF
    l = (char16 & 0xFF)
    sys.stdout.write(chr(f) + chr(m) + chr(l))
    sys.stdout.flush()
         
if __name__ == '__main__':
    print getTerminalSize()
    setCursorPosition(0,0)
    clear_scr()
    #ascii()
    print_utf8(0xe4a5)


    
